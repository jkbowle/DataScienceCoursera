max_price = max(price),
n = n())
diamondsByClarity <- summarize(table_d,
mean_price = mean(price),
median_price = median(as.numeric(price)),
min_price = min(price),
max_price = max(price),
n = n())
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity, mean_price = mean(price))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color, mean_price = mean(price))
p1 <- ggplot(diamonds_mp_by_clarity, aes(x = clarity, y = mean_price)) +
geom_bar()
p1
?geom_bar
p1 <- ggplot(diamonds_mp_by_clarity, aes(x = clarity, y = mean_price)) +
geom_bar(stat = "identity")
p1
p2 <- ggplot(diamonds_mp_by_color, aes(x = clarity, y = mean_price)) +
geom_bar(stat = "identity")
p2
p2 <- ggplot(diamonds_mp_by_color, aes(x = color, y = mean_price)) +
geom_bar(stat = "identity")
p
p2
grid.arrange(p1, p2, ncol = 1)
library(gridExtra)
grid.arrange(p1, p2, ncol = 1)
diamonds_by_cut <- group_by(diamonds, cut)
daamonds_mp_by_cut <- summarise(diamonds_by_cut, mean_price = mean(price))
p3 <- ggplot(diamonds_mp_by_color, aes(x = cut, y = mean_price)) +
geom_bar(stat = "identity")
p3
p3 <- ggplot(diamonds_mp_by_cut, aes(x = cut, y = mean_price)) +
geom_bar(stat = "identity")
p3 <- ggplot(daamonds_mp_by_cut, aes(x = cut, y = mean_price)) +
geom_bar(stat = "identity")
p3
grid.arrange(p1, p2, p3, ncol = 1)
summarize?
()
summarize()?
()
group_by?
()''
?group_by()
?group_by
?summarize
View(table_d)
View(diamonds_by_clarity)
diamonds <- transform(diamonds, volume = x * y * z)
ggplot(aes(x = price, y = volume), data = diamonds) +
scale_y_log10() +
geom_point()
library(ggplot2)
library(ggplot2)
install.packages('MASS')
library(ggplot2)
ggplot(aes(x = price, y = volume), data = diamonds) +
scale_y_log10() +
geom_point()
library(GGally)
library(scales)
library(memisc)
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
library(gridExtra)
plot1 <- ggplot(aes(x = price),data = diamonds) +
geom_histogram() +
ggtitle('Price')
plot1 <- ggplot(aes(x = price),data = diamonds) +
geom_histogram() +
ggtitle('Price')
plot2 <- ggplot(aes(x = price),data = diamonds) +
geom_histogram() +
scale_x_log10() +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol = 1)
plot1 <- ggplot(aes(x = price),data = diamonds) +
geom_histogram(binwidth = 100) +
ggtitle('Price')
plot2 <- ggplot(aes(x = price),data = diamonds) +
geom_histogram(binwidth = .01) +
scale_x_log10() +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol = 1)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_jitter(alpha = 1/2, size = 3/4) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 1/2, size = 3/4, position = 'jitter) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 1/2, size = 3/4, position = 'jitter') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
install.packages('RColorBrewer')
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter',aes(color = clarity)) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter',aes(color=cut)) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
swirl()
swirl
library(swirl)
swirl()
formula?
sd
?formula
?truehist
?auc
?gbm
?norm
?pnorm
pnorm(40,30,4)
normP(40)
print normP(40)
normP <- hack_normp(test_param){
return round(pnorm(test_param, 30, 4),3)
}
print normP(40)
normP <- function(test_param){
return round(pnorm(test_param, 30, 4),3)
}
normP <- function(test_param){
return round(pnorm(test_param, 30, 4),3)
}
normP <- function(test_param){
return round(pnorm(test_param, 30, 4),3)
}
print(normP(40))
normP <- function(test_param){
return round(pnorm(test_param, 30, 4),3)
}
mysummary <- function(x,npar=TRUE,print=TRUE) {
if (!npar) {
center <- mean(x); spread <- sd(x)
} else {
center <- median(x); spread <- mad(x)
}
if (print & !npar) {
cat("Mean=", center, "\n", "SD=", spread, "\n")
} else if (print & npar) {
cat("Median=", center, "\n", "MAD=", spread, "\n")
}
result <- list(center=center,spread=spread)
return(result)
}
normP <- function(test_param) {
return round(pnorm(test_param, 30, 4),3)
}
my_nsumm <- function(test_param) {
res <- round(pnorm(test_param, 30, 4),3)
return res
}
my_nsumm <- function(test_param) {
res <- round(pnorm(test_param, 30, 4),3)
return(res)
}
print(normP(40))
normP <- function(test_param) {
res <- round(pnorm(test_param, 30, 4),3)
return(res)
}
print(normP(40))
print(normP(40))
print(1-normP(21))
print(normP(35)-normP(30))
write(normP(40),stdout())
write(normP(40),stdout())
write(1-normP(21),stdout())
write(normP(35)-normP(30),stdout())
write(1-normP(30),stdout())
sysout <- function(message){
write(message,stdout())
}
sysout(normP(35))
normP <- function(test_param, m=30) {
res <- round(pnorm(test_param, m, 4),3)
return(res)
}
sysout(normP(40))
normP <- function(test_param, m=30,s=4) {
res <- round(pnorm(test_param, m, s),3)
return(res)
}
sysout <- function(message){
write(message,stdout())
}
sysout(normP(19.5,m=20,s=2))
sysout(normP(22,m=20,s=2)-normP(20,m=20,s=2))
sysout(1-normP(80,m=70,s=10))
sysout(1-normP(59,m=70,s=10))
sysout(normP(60,m=70,s=10))
normP <- function(test_param, m=30,s=4) {
res <- round(pnorm(test_param, m, s)*100,2)
return(res)
}
sysout <- function(message){
write(message,stdout())
}
sysout(1-normP(80,m=70,s=10))
sysout(1-normP(60,m=70,s=10))
sysout(normP(60,m=70,s=10))
normP <- function(test_param, m=30,s=4) {
res <- round(abs(pnorm(test_param, m, s)*100),2)
return(res)
}
sysout <- function(message){
write(message,stdout())
}
sysout(1-normP(80,m=70,s=10))
sysout(1-normP(60,m=70,s=10))
sysout(normP(60,m=70,s=10))
normP <- function(test_param, m=30,s=4) {
res <- round(abs(pnorm(test_param, m, s)*100),2)
return(res)
}
sysout(1-normP(80,m=70,s=10))
sysout(1-normP(60,m=70,s=10))
sysout(normP(60,m=70,s=10))
sysout(1-abs(normP(80,m=70,s=10)))
sysout(1-abs(normP(60,m=70,s=10)))
sysout(normP(60,m=70,s=10))
sysout(normP(80,m=70,s=10))
sysout(1-normP(80,m=70,s=10))
sysout(100-normP(80,m=70,s=10))
sysout(100-normP(80,m=70,s=10))
sysout(100-normP(60,m=70,s=10))
sysout(normP(60,m=70,s=10))
?dbinom
dbinom(2,size=4,prob=1.09/2.09)
write(round(dbinom(2,size=4,prob=1.09/2.09),3),stdout())
write(round(dbinom(2,size=4,prob=1.09/2.09),3),stdout())
write(round(dbinom(3,size=4,prob=1.09/2.09)+dbinom(4,size=4,prob=1.09/2.09),3),stdout())
write(round(dbinom(0,size=4,prob=1.09/2.09)+dbinom(1,size=4,prob=1.09/2.09),3),stdout())
write(round(pbinom(1,size=4,prob=1.09/2.09),stdout())
write(round(pbinom(1,size=4,prob=1.09/2.09),stdout()))
write(round(pbinom(1,size=4,prob=1.09/2.09),stdout()))
write(round(dbinom(2,size=4,prob=1.09/2.09),3),stdout())
write(round(pbinom(1,size=4,prob=1.09/2.09),stdout()))
write(round(pbinom(1,size=4,prob=1.09/2.09),stdout()))
?pbinom
write(round(pbinom(1,size=4,prob=1.09/2.09),3),stdout())
write(round(dbinom(2,size=4,prob=1.09/2.09)+dbinom(3,size=4,prob=1.09/2.09)+dbinom(4,size=4,prob=1.09/2.09),3),stdout())
write(round(dbinom(0,size=4,prob=1.09/2.09),3),stdout())
write(round(pbinom(1,size=4,prob=4/5),3),stdout())
write(round(dbinom(2,size=4,prob=4/5)+dbinom(3,size=4,prob=4/5)+dbinom(4,size=4,prob=4/5),3),stdout())
write(round(pbinom(1,size=4,prob=4/5),3),stdout())
write(dbinom(3,size=4,prob=4/5)+dbinom(4,size=4,prob=4/5),3),stdout())
write(round(pbinom(1,size=4,prob=4/5),3),stdout())
write(round(dbinom(3,size=4,prob=4/5)+dbinom(4,size=4,prob=4/5),3),stdout())
write(round(pbinom(1,size=4,prob=4/5),3),stdout())
write(round(pbinom(2,size=6,prob=1.09/2.09),3))
write(round(pbinom(2,size=6,prob=1.09/2.09),3))
write(round(pbinom(2,size=6,prob=1.09/2.09),3),stdout())
write(1-round(pbinom(2,size=6,prob=1.09/2.09),3),stdout())
write(round(pbinom(2,size=10,prob=.12),3),stdout())
write(round(1- pbinom(1,size=10,prob=.12),3),stdout())
n = c(2, 3, 5)
s = c("aa", "bb", "cc")
b = c(TRUE, FALSE, TRUE)
df = data.frame(n, s, b)
View(df)
View(df)
PhysicsScores = c(15,12,8,8,7,7,7,6,5,3)
HistoryScores = c(10,25,17,11,13,17,20,13,9, 15)
df = data.frame(PhysicsScores, HistoryScores)
View(df)
View(df)
cor(df, use="complete.obs", method="pearson")
pc <- cor(df, use="complete.obs", method="pearson")
View(pc)
pc["PhysicsScores","HistoryScores"]
write(round(pc["PhysicsScores","HistoryScores"]),3,stdout())
write(round(pc["PhysicsScores","HistoryScores"])[0],3,stdout())
hold <- pc["PhysicsScores","HistoryScores"])
hold <- pc["PhysicsScores","HistoryScores"]
write(round(hold,3,stdout())
s
write(round(hold,3),stdout())
PhysicsScores = c(15,12,8,8,7,7,7,6,5,3)
HistoryScores = c(10,25,17,11,13,17,20,13,9, 15)
df = data.frame(PhysicsScores, HistoryScores)
pc <- cor(df, use="complete.obs", method="pearson")
write(round(pc["PhysicsScores","HistoryScores"],3),stdout())
library(ggplot)
library(ggplot2)
?read.table
pwd()
wd()
getwd()
setwd("C:\Users\id19868\Documents\Coursera\datasciencecoursera")
setwd("C:/Users/id19868/Documents/Coursera\datasciencecoursera")
setwd("C:\\Users\\id19868\\Documents\\Coursera\\datasciencecoursera")
read.csv("hw1_data.csv")
hw1 <- read.csv("hw1_data.csv")
View(hw1)
View(hw1)
hw1[1:2]
hw1.head(2)
hw1.head()
hw1
head(hw1,2)
length(hw1)
nrow(hw1)
tail(hw1,2)
hw1[47]
hw1[,2]
hw1[1,]
hw1[47,]
tail(hw1,2)
hw1[152,]
hw1[47,]
hw1[47,"Ozone"]
hw1[,"Ozone"]
ozone <- hw1[,"Ozone"]
count(ozone)
length(ozone)
length(ozone, na.rm=TRUE)
ozone <- na.omit(ozone)
length(ozone)
153 - 166
153 - 116
mean(ozone)
mean(hw1[,"Ozone"],na.rm=TRUE)
hw1$Ozone > 31
hw1$Ozone > 31 and hw1$ > 90
hw1$Ozone > 31 && hw1$ > 90
hw1$Ozone > 31 && hw1$Temp > 90
hw1$Ozone > 31 & hw1$Temp > 90
mean((hw1$Ozone > 31 & hw1$Temp > 90)[,"Solar.R"])
subset(hw1, Ozone > 31)
subset(hw1, Ozone > 31 & Temp > 90)
subset(hw1, Ozone > 31 & Temp > 90)$Solar.R
mean(subset(hw1, Ozone > 31 & Temp > 90)$Solar.R)
mean(subset(hw1, Month == 6)$Temp)
max(subset(hw1, Month == 5)$Ozone)
max(subset(hw1, Month == 5)$Ozone, na.rm=TRUE)
typeof(4)
class(4)
class(c(4, TRUE))
x <- c(1,3,5)
y <- c(3,2,10)
cbind(x,y)
x <- c(2,"a","b",TRUE)
x[[1]]
class(x[[1]])
x <- 1:4
y <- 2
x + y
x <- c(3, 5, 1, 10, 12, 6)
x[x < 6] <- 0
x
head(hw1,2)
tail(hw1,2)
hw1[47,"Ozone"]
153 - 116
mean(ozone)
mean(subset(hw1,Ozone > 31 & Temp > 90)$Solar.R)
mean(subset(hw1, Month == 6)$Temp)
hw1[47]
max(subset(hw1, Month == 5)$ozone, na.rm=TRUE)
mean(subset(hw1, Month == 6)$Temp)
max(subset(hw1, Month == 5)$Ozone, na.rm=TRUE)
max(subset(hw1, Month == 5)$ozone, na.rm=TRUE)
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
?httr
install_from_swirl("R Programming")
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555,z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0,10)
c(1, 2, 3, 4) + c(0,10,100)
z * 2 + 1000
my_sqrt
my_div
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files())
args(list.files)
old.dir <- getwd()
args(dir.create)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("test2.R","mytest3.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
play()
?file.path
file.path("folder1,"folder2"")
file.path("folder1,"folder2")
file.path("folder1","folder2")
nxt()
file.path("folder1","folder2")
play()
?dir.create
nxt()
nxt()
?dir.create
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"), recursive = TRUE)
play()
?unlink
nxt()
unlink("testdir2",recursive=TRUE)
setwd(old.dir)
unlink("testdir",recursive=TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10, by=.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
set(along.with = my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(1,2,3), times = 10)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
